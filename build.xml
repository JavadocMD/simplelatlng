<project name="simplelatlng" default="full-dist" basedir=".">
	
	<!-- Project Properties -->
	
	<property name="version"        value="1.3.1" />
	
	<property name="java.dir"       value="${basedir}/src/main/java" />
	<property name="resources.dir"  value="${basedir}/src/main/resources" />
	<property name="test.dir"		value="${basedir}/src/test/java" />
	<property name="dist.dir"       value="${basedir}/dist" />
	<property name="work.dir"		value="${basedir}/work" />
	<property name="jar.work.dir"	value="${work.dir}/jar" />
	<property name="test.work.dir"	value="${work.dir}/test" />
	<property name="test.report.dir" value="${test.work.dir}/report" />
	<property name="doc.work.dir"   value="${work.dir}/doc" />
	<property name="cobertura.work.dir" value="${work.dir}/cobertura" />
	<property name="cobertura.report.dir" value="${cobertura.work.dir}/report" />
	
	<property file="${basedir}/build.properties" />
	
	<tstamp>
		<format property="today" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>
	
	
	<!-- Project Classpaths -->
	
	<path id="project.classpath">
		<pathelement path="${jar.work.dir}" />
	</path>
	
	<path id="test.classpath">
		<fileset dir="${junit.path}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${test.work.dir}" />
	</path>
	
	<path id="cobertura.classpath">
		<fileset dir="${cobertura.path}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
		<pathelement path="${cobertura.work.dir}" />
	</path>
	
	
	<!-- Project Targets -->
	
	<target name="clean" description="Cleans all build-generated files.">
		<delete dir="${work.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${doc.work.dir}" />
	</target>
	
	
	<target name="prepare" description="Creates build-necessary directories.">
		<mkdir dir="${work.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${jar.work.dir}" />
		<mkdir dir="${test.work.dir}" />
		<mkdir dir="${test.report.dir}" />
	</target>
	
	
	<target name="compile" depends="prepare" description="Compiles the base project source.">
		<javac srcdir="${java.dir}" destdir="${jar.work.dir}" debug="${javac.debug}" />
	</target>
	
	
	<target name="compile-tests" depends="prepare, compile" description="Compiles jUnit tests.">
		<javac srcdir="${test.dir}" destdir="${test.work.dir}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<classpath refid="test.classpath" />
		</javac>
	</target>
	
	
	<target name="test" depends="compile, compile-tests" if="junit.path" description="Runs jUnit tests.">
		<junit printsummary="yes" haltonfailure="yes">
			<classpath refid="project.classpath" />
			<classpath refid="test.classpath" />
			<formatter type="plain" />
			<batchtest todir="${test.report.dir}">
				<fileset dir="${test.work.dir}">
					<include name="**/*Test.*" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	
	<target name="copy-source-and-manifest" if="dest" description="Utility target for copying all source, license information, and a manifest file to a destination directory given by parameter 'dest'.">
		<copy todir="${dest}">
			<fileset dir="${java.dir}" />
		</copy>
		
		<copy todir="${dest}/META-INF">
			<fileset dir="${resources.dir}">
				<include name="LICENSE.txt" />
				<include name="NOTICE.txt" />
				<include name="README.txt" />
			</fileset>
		</copy>
		
		<manifest file="${dest}/META-INF/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Implementation-Version" value="${version}" />
			<attribute name="Built-Date" value="${today}" />
		</manifest>
	</target>
	
	
	<target name="dist" depends="prepare, compile" description="Creates the project runtime jar.">
		<antcall target="copy-source-and-manifest">
			<param name="dest" value="${jar.work.dir}" />
		</antcall>
		
		<jar destfile="${dist.dir}/${ant.project.name}-${version}.jar" 
			basedir="${jar.work.dir}" 
			manifest="${jar.work.dir}/META-INF/MANIFEST.MF" />
	</target>
	
	
	<target name="javadoc" depends="prepare" description="Generates the project's Javadoc.">
		<javadoc sourcepath="${java.dir}" destdir="${doc.work.dir}" overview="${java.dir}/overview.html" />
	</target>
	
	
	<target name="dist-doc" depends="prepare, javadoc" description="Creates the project's Javadoc jar.">
		<antcall target="copy-source-and-manifest">
			<param name="dest" value="${doc.work.dir}" />
		</antcall>
		
		<jar destfile="${dist.dir}/${ant.project.name}-${version}-doc.jar"
			basedir="${doc.work.dir}"
			manifest="${doc.work.dir}/META-INF/MANIFEST.MF" />
	</target>
	
	
	<target name="cobertura" depends="clean, prepare" if="cobertura.path" description="Runs Cobertura code coverage tool.">
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
		
		<antcall target="compile">
			<param name="javac.debug" value="true" />
		</antcall>
		<antcall target="compile-tests">
			<param name="javac.debug" value="true" />
		</antcall>
		
		<cobertura-instrument 
				todir="${cobertura.work.dir}">
		    <fileset dir="${jar.work.dir}">
		        <include name="**/*.class"/>
		    </fileset>
		</cobertura-instrument>
		
		<junit printsummary="no" haltonfailure="no" fork="once">
			<classpath refid="cobertura.classpath" />
			<classpath refid="test.classpath" />
			<formatter type="plain" />
			<batchtest todir="${test.report.dir}">
				<fileset dir="${test.work.dir}">
					<include name="**/*Test.*" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	
	<target name="cobertura-report" description="Generates the Cobertura report. Run cobertura target separately.">
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
		
		<cobertura-report srcdir="${java.dir}" destdir="${cobertura.report.dir}" />
	</target>
	
	
	<target name="full-dist">
		<antcall target="clean" />
		<antcall target="test" />
		<antcall target="dist" />
		<antcall target="dist-doc" />
	</target>
</project>